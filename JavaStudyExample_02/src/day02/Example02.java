package day02;
//클래스(Class)
//OOP(객체 지향 프로그래밍)의 핵심이 되는 객체를 생성하기 위해 만들어주는 데이터
//ex) 전화기 에는 버튼, 소리, 카메라 등의 요소들이 존재하고
//	  사운드 키고 줄이기, 버튼을 눌러 앱 실행하기, 전화하기 등의
//	  기능이 존재합니다.
//class 이름: 전화기
//class의 필드: 버튼, 소리, 카메라
//class의 메소드: 사운드 키고 줄이기, 버튼 눌러 앱 실행하기, 전화하기...

//클래스의 기본 구조
//1. 필드(Field): 객체의 데이터가 저장되는 곳, 객체의 속성을 표현하는 곳(멤버 변수)

//2. 메소드(Method): 객체의 동작, 기능을 표현하는 곳 (멤버 함수)

//3. 생성자(Constructor): new 연산자에 의해 호출되는 메소드
//						클래스의 이름과 동일한 메소드입니다.
//						반환 타입이 따로 없는 메소드입니다.(int나 void등을 작성하지 않습니다.)
//						객체의 생성 시 필드의 초기화를 담당하는 곳

//클래스 설계 방식

//접근제한자 class 클래스명
//{
//	필드;
//	
//	{
//		초기화 블록;
//	}
//	
//	생성자;
//	
//	메소드;
//}

//1. 접근 제한자: 자바에서는 데이터에 대한 접근 여부를 설정할 수 있습니다.
//===========================================================================================================================
//     종류              사용 가능 대상              접근 여부            접근 불가                 특이사항
//===========================================================================================================================
//1. public          클래스,필드,생성자,메소드         모든 대상              -            public class는 자바 파일의 이름과 동일합니다.
//2. private         필드,생성자,메소드              클래스 내부          클래스 외부           
//3. protected       필드,생성자,메소드              같은 패키지        자식 클래스가 아닌     상속을 사용해야 의미 있는 제한자
//                                              자식 클래스       다른 패키지의 클래스
//4. default         클래스,필드,생성자,메소드         같은 패키지          다른 패키지        따로 제한자를 작성하지 않으면 자동으로 설정됩니다.
//                                                                               default를 직접 작성하지 않습니다.
//===========================================================================================================================

//2. 패키지(package): 저장 위치
//package 클래스명;
//.을 이용해서 세부적인 설정이 가능
//import 키워드를 통해 패키지를 코드 내에 포함시키는게 가능합니다.
//import 패키지.클래스명;

//3. 선언 위치에 따른 변수의 종류
//자바에서 변수의 종류는 다음과 같습니다.
//      이름                선언되는 위치              생성되는 시기(메모리 할당 시기)            특징
//1. 클래스 변수               클래스 영역               클래스가 메모리에 올라갈 때              static 키워드가 붙습니다.
//2. 인스턴스 변수              클래스 영역               인스턴스가 생성될 때                   new를 이용한 생성 이후 각각에게 값 제공
//3. 지역 변수            메소드,생성자,초기화 블록          변수에 대한 선언이 진행될 때             메소드 등에서 만들어지고, 호출 종료 시 삭제 됩니다.

class Test
{
	public static int A = 10;
	public int b = 5;
	
	public void Method()
	{
		int local = 5;
	}
}



public class Example02 {

	public static void main(String[] args) {
		// 자바 클래스 복습
		
		Test t = new Test(); //Test 형태의 인스턴스 t 생성
							 //레퍼런스 t라고도 부릅니다.
		//기본현(primitive): 변수를 직접적으로 가리키는 형태입니다.
		//레퍼런스(reference): 변수를 간접적으로 가리키는 형태, 우리가 직접 정의를 해야하는 경우엔 거의 다 레퍼런스라고 생각하면 될 듯 
		
		//기본형: int, float, boolean, char, byte ...
		//특징: 실제 데이터 값을 저장하는 타입
		
		//레퍼런스의 대표적인 예시
		//특징: 객체(object)를 참조(주소 저장)하는 타입
		//     저장된 메모리의 위치(번지)를 통해 객체를 참조한다.
		
		//String: 자바의 String을 char 형태의 데이터를 ""로 묶어서 나열해 표현하는 클래스입니다.
		//        단, String의 경우 사용 방식이 primitive처럼 바로 사용할 수 있는 형태에서 헷갈릴 수 있음.
		
		//class는 사용자가 정의하는 데이터로, 대표적인 레퍼런스입니다. class로 만든 객체의 변수, 메소드
		//와 같은 형태로 저장된 위치에 접근해서 사용합니다.
		//Array(배열): 배열도 레퍼런스입니다.
		//            같은 형태의 데이터를 순서대로 묶어서 별도의 공간에 순차적으로 저장합니다.
		//            내부에서 배열의 주소(이름)을 찾고, 저장된 위치를 통해 값을 사용합니다.
		
		
		//기본 형태의 타입과 레퍼런스 형태의 타입을 구분하는 방법
		//1. Null(값 없음)을 담을 수 있는가?
		//int i = null;  //(기본 형태의 데이터는 null 개념이 없습니다.)
		Integer integer = null;
		String string = null;
		
		//2. 제네릭(<>)에서 사용이 가능한가? <T>
		//제네릭의 <T>는 해당 타입이 어떤 타입인지를 정하는 기능
		//이때 이 타입은 객체만 넣을 수 있습니다.
		//ArrayList<int> al; //불가능
		//ArrayList<String> st_al; //가능
		
		
		//성능적인 문제
		//기본형의 경우는 실제 데이터의 값이기 때문에 바로 사용 가능
		//레퍼런스의 경우는 특정 타입에 대해서 언박싱 작업을 거쳐야 함.
		//언박싱: 참조형 데이터를 기본 데이터 형태로 풀어내는 것
		//Integer -> int (Unboxing)
		//int -> Integer (Boxing)
		
		//따라서 기본형의 데이터가 속도적으로 무조건 더 빠릅니다.
		
		//기본형은 메모리 영역 중에 스택(Stack) 영역에 존재합니다.
		//참조형은 메모리 영역 중에 스택 영역에 참조한 값이 존재하고
		//                   실제 값은 힙(Heap) 영역에 존재합니다.
		
		
		
		
		
		
		
		
		
		
	}

}
